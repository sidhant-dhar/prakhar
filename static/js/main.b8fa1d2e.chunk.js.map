{"version":3,"sources":["assets/prakharLogo.jpeg","navbar.js","Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBarComponent","state","navBackground","param","classAdder","document","querySelector","scrollIntoView","behavior","block","addEventListener","backgroundcolorBool","window","scrollY","setState","classNav","this","Navbar","expand","className","Brand","href","onClick","navigate","bind","src","prakharLogo","width","height","alt","Toggle","aria-controls","Collapse","id","Nav","Link","Component","Jumbo","Fragment","fluid","Registration","lazy","About","Footer","Team","Vision","App","Container","fallback","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,0C,0RC8C5BC,E,4MAxCbC,MAAQ,CACNC,eAAgB,G,uDAGPC,GACP,IAAMC,EAAa,IAAMD,EACVE,SAASC,cAAcF,GAChCG,eAAe,CAAEC,SAAU,SAAUC,MAAO,a,0CAI/B,IAAD,OAElBJ,SAASK,iBAAiB,UAAU,WAClC,IAAMC,IAAsBC,OAAOC,QAAU,KAC7C,EAAKC,SAAS,CAAEZ,cAAeS,S,+BAKhC,IAAII,EAAWC,KAAKf,MAAMC,cAAgB,iEAAmE,wDAE5G,OACE,kBAACe,EAAA,EAAD,CAAQC,OAAO,KAAKC,UAAaJ,GAC/B,kBAACE,EAAA,EAAOG,MAAR,CAAcC,KAAK,QAAQC,QAAWN,KAAKO,SAASC,KAAKR,KAAM,UAAU,yBAAKS,IAAMC,IAAaC,MAAQ,KAAKC,OAAS,KAAKT,UAAY,2BAA2BU,IAAM,UACzK,kBAACZ,EAAA,EAAOa,OAAR,CAAeC,gBAAc,qBAC7B,kBAACd,EAAA,EAAOe,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKf,UAAU,iDACb,kBAACe,EAAA,EAAIC,KAAL,CAAUd,KAAK,UAAUF,UAAY,OAAOc,GAAK,OAAOX,QAAWN,KAAKO,SAASC,KAAKR,KAAM,WAA5F,WACA,kBAACkB,EAAA,EAAIC,KAAL,CAAUd,KAAK,SAASF,UAAY,OAAOc,GAAK,OAAOX,QAAWN,KAAKO,SAASC,KAAKR,KAAM,UAA3F,SACA,kBAACkB,EAAA,EAAIC,KAAL,CAAUd,KAAK,SAASF,UAAY,OAAOc,GAAK,OAAOX,QAAWN,KAAKO,SAASC,KAAKR,KAAM,iBAA3F,sBACA,kBAACkB,EAAA,EAAIC,KAAL,CAAUd,KAAK,QAAQF,UAAY,OAAOc,GAAK,OAAOX,QAAWN,KAAKO,SAASC,KAAKR,KAAM,iBAA1F,QACA,kBAACkB,EAAA,EAAIC,KAAL,CAAUd,KAAK,WAAWF,UAAY,wBAAwBc,GAAK,OAAOX,QAAWN,KAAKO,SAASC,KAAKR,KAAM,YAA9G,kB,GAlCcoB,a,gBCsBfC,E,uKAjBP,OACI,kBAAC,IAAMC,SAAP,KACA,kBAAC,IAAD,CAAWnB,UAAY,aAAaoB,OAAK,IAGzC,yBAAKpB,UAAY,iBACjB,uCACA,2N,GAXQiB,a,QCAdI,EAAeC,gBAAK,kBAAM,gCAC1BC,EAAQD,gBAAK,kBAAM,gCACnBE,EAASF,gBAAK,kBAAM,sDACpBG,EAAOH,gBAAK,kBAAM,gCAClBI,EAASJ,gBAAK,kBAAM,gCAmBXK,MAjBf,WACE,OACI,kBAACC,EAAA,EAAD,CAAWR,OAAK,EAACpB,UAAY,2BAC7B,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAU6B,SAAY,kDACnB,kBAACH,EAAD,MACA,kBAACH,EAAD,MACA,kBAACF,EAAD,MACA,kBAACI,EAAD,MACA,kBAACD,EAAD,SCTWM,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlD,SAASmD,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b8fa1d2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/prakharLogo.d4bfe393.jpeg\";","import React, { Component } from 'react';\r\nimport prakharLogo from './assets/prakharLogo.jpeg'\r\nimport './navbar.css';\r\nimport { Navbar,Nav } from 'react-bootstrap'\r\nclass NavBarComponent extends Component {\r\n\r\n  state = {\r\n    navBackground : false\r\n  }\r\n\r\n    navigate(param) {\r\n      const classAdder = '.' + param;\r\n      const anchor = document.querySelector(classAdder);\r\n     anchor.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n  \r\n    }\r\n\r\n    componentDidMount() {\r\n \r\n      document.addEventListener(\"scroll\", () => {\r\n        const backgroundcolorBool = window.scrollY < 120 ? false : true;\r\n        this.setState({ navBackground: backgroundcolorBool });\r\n      });\r\n    }\r\n\r\n    render() {\r\n       let classNav = this.state.navBackground ? 'fixed-top prakhar-navbar-scrolled navbar-dark navbar-expand-md' : 'prakhar-navbar fixed-top navbar-dark navbar-expand-md'\r\n\r\n        return (\r\n          <Navbar expand=\"lg\" className = {classNav}>\r\n            <Navbar.Brand href=\"#home\" onClick = {this.navigate.bind(this, 'jumbo')}><img src= {prakharLogo} width = '80' height = '80' className = 'd-inline-block ml-4 mt-5' alt = 'logo'/></Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"ml-auto float-right text-right custom-toggler\">\r\n                <Nav.Link href=\"#vision\" className = \"mx-3\" id = \"link\" onClick = {this.navigate.bind(this, 'vision')}>Mission</Nav.Link>\r\n                <Nav.Link href=\"#about\" className = \"mx-3\" id = \"link\" onClick = {this.navigate.bind(this, 'about')}>About</Nav.Link>\r\n                <Nav.Link href=\"#event\" className = \"mx-3\" id = \"link\" onClick = {this.navigate.bind(this, 'registration')}>Event Registration</Nav.Link>\r\n                <Nav.Link href=\"#team\" className = \"mx-3\" id = \"link\" onClick = {this.navigate.bind(this, 'team-wrapper')}>Team</Nav.Link>\r\n                <Nav.Link href=\"#contact\" className = \"ml-lg-3 mx-3 last-nav\" id = \"link\" onClick = {this.navigate.bind(this, 'contact')}>Contact</Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBarComponent;","import React, { Component } from 'react';\r\nimport './Jumbotron.css';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\n\r\n\r\nclass Jumbo extends Component {\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n            <Jumbotron className = \"jumbo mb-0\" fluid>\r\n          \r\n          </Jumbotron>\r\n            <div className = 'jumbo-content'>\r\n            <h1>PRAKHAR</h1>\r\n            <p>\r\n            A non-profit non-government organization (NGO) based in Delhi, work with top Indian experts / professionals / \r\n            specialists with varied interests &amp; expertise in the field of education.\r\n            </p>\r\n        </div>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Jumbo;","import React, { lazy, Suspense } from 'react';\nimport './App.css';\nimport NavBarComponent from './navbar';\nimport Jumbo from './Jumbotron';\nimport Container from 'react-bootstrap/Container';\nconst Registration = lazy(() => import('./registration')); \nconst About = lazy(() => import('./about'));\nconst Footer = lazy(() => import('./footer'));\nconst Team = lazy(() => import('./team'));\nconst Vision = lazy(() => import('./vision'));\n\nfunction App() {\n  return (\n      <Container fluid className = 'p-0 m-0 overflow-hidden'>\n      <NavBarComponent/>\n      <Jumbo/>\n      <Suspense fallback = {<h1>Still Loading....</h1>}>\n         <Vision/>\n         <About/>\n         <Registration/>\n         <Team/>\n         <Footer/>\n      </Suspense>\n      {/* <img src = {poster} alt = 'poster'className = 'img-fluid w-100'/> */}\n      </Container>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}